<?xml version="1.0" encoding="UTF-8"?>
<!-- IMPORTANT: This is an internal file that has been generated
     by the Xilinx ISE software.  Any direct editing or
     changes made to this file may result in unpredictable
     behavior or data corruption.  It is strongly advised that
     users do not edit the contents of this file. -->
<messages>
<msg type="warning" file="HDLCompiler" num="413" delta="old" >"D:\Xilinx\workshop\cpu_32_board\key_anti_shake_2.v" Line 34: Result of <arg fmt="%d" index="1">2</arg>-bit expression is truncated to fit in <arg fmt="%d" index="2">1</arg>-bit target.
</msg>

<msg type="warning" file="HDLCompiler" num="413" delta="old" >"D:\Xilinx\workshop\cpu_32_board\key_anti_shake_2.v" Line 40: Result of <arg fmt="%d" index="1">2</arg>-bit expression is truncated to fit in <arg fmt="%d" index="2">1</arg>-bit target.
</msg>

<msg type="warning" file="HDLCompiler" num="1127" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 74: Assignment to <arg fmt="%s" index="1">clk</arg> ignored, since the identifier is never used
</msg>

<msg type="warning" file="HDLCompiler" num="817" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 33: System task <arg fmt="%s" index="1">fdisplay</arg> ignored for synthesis
</msg>

<msg type="warning" file="HDLCompiler" num="1499" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 21: Empty module &lt;<arg fmt="%s" index="1">file_write(WIDTH=32,ARGUMENT=&quot;regfiles2&quot;)</arg>&gt; remains a black box.
</msg>

<msg type="warning" file="HDLCompiler" num="817" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 33: System task <arg fmt="%s" index="1">fdisplay</arg> ignored for synthesis
</msg>

<msg type="warning" file="HDLCompiler" num="1499" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 21: Empty module &lt;<arg fmt="%s" index="1">file_write(WIDTH=32,ARGUMENT=&quot;regfiles3&quot;)</arg>&gt; remains a black box.
</msg>

<msg type="warning" file="HDLCompiler" num="817" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 33: System task <arg fmt="%s" index="1">fdisplay</arg> ignored for synthesis
</msg>

<msg type="warning" file="HDLCompiler" num="1499" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 21: Empty module &lt;<arg fmt="%s" index="1">file_write(WIDTH=32,ARGUMENT=&quot;regfiles4&quot;)</arg>&gt; remains a black box.
</msg>

<msg type="warning" file="HDLCompiler" num="817" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 33: System task <arg fmt="%s" index="1">fdisplay</arg> ignored for synthesis
</msg>

<msg type="warning" file="HDLCompiler" num="1499" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 21: Empty module &lt;<arg fmt="%s" index="1">file_write(WIDTH=32,ARGUMENT=&quot;regfiles8&quot;)</arg>&gt; remains a black box.
</msg>

<msg type="warning" file="HDLCompiler" num="817" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 33: System task <arg fmt="%s" index="1">fdisplay</arg> ignored for synthesis
</msg>

<msg type="warning" file="HDLCompiler" num="1499" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 21: Empty module &lt;<arg fmt="%s" index="1">file_write(WIDTH=32,ARGUMENT=&quot;regfiles29&quot;)</arg>&gt; remains a black box.
</msg>

<msg type="warning" file="HDLCompiler" num="817" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 33: System task <arg fmt="%s" index="1">fdisplay</arg> ignored for synthesis
</msg>

<msg type="warning" file="HDLCompiler" num="1499" delta="old" >"D:\Xilinx\workshop\cpu_32_board\file_write.v" Line 21: Empty module &lt;<arg fmt="%s" index="1">file_write(WIDTH=32,ARGUMENT=&quot;regfiles30&quot;)</arg>&gt; remains a black box.
</msg>

<msg type="warning" file="HDLCompiler" num="1127" delta="old" >"D:\Xilinx\workshop\cpu_32_board\CPU.v" Line 97: Assignment to <arg fmt="%s" index="1">carry</arg> ignored, since the identifier is never used
</msg>

<msg type="warning" file="HDLCompiler" num="1127" delta="old" >"D:\Xilinx\workshop\example_5\sum_origin\cla_32_final.v" Line 30: Assignment to <arg fmt="%s" index="1">g</arg> ignored, since the identifier is never used
</msg>

<msg type="warning" file="HDLCompiler" num="1127" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_mem_final.v" Line 37: Assignment to <arg fmt="%s" index="1">IM_R</arg> ignored, since the identifier is never used
</msg>

<msg type="warning" file="HDLCompiler" num="1499" delta="old" >"D:\Xilinx\workshop\cpu_32_board\ipcore_dir\IPCORE1.v" Line 39: Empty module &lt;<arg fmt="%s" index="1">IPCORE1</arg>&gt; remains a black box.
</msg>

<msg type="warning" file="HDLCompiler" num="189" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_mem_final.v" Line 39: Size mismatch in connection of port &lt;<arg fmt="%s" index="3">a</arg>&gt;. Formal port size is <arg fmt="%d" index="2">6</arg>-bit while actual signal size is <arg fmt="%d" index="1">10</arg>-bit.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 165: Signal &lt;<arg fmt="%s" index="1">scan_cnt</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 177: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 178: Signal &lt;<arg fmt="%s" index="1">array_reg_2</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 179: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 180: Signal &lt;<arg fmt="%s" index="1">array_reg_2</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 181: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 182: Signal &lt;<arg fmt="%s" index="1">array_reg_3</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 183: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 184: Signal &lt;<arg fmt="%s" index="1">array_reg_3</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 185: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 186: Signal &lt;<arg fmt="%s" index="1">array_reg_4</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 187: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 188: Signal &lt;<arg fmt="%s" index="1">array_reg_4</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 189: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 190: Signal &lt;<arg fmt="%s" index="1">array_reg_29</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 191: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 192: Signal &lt;<arg fmt="%s" index="1">array_reg_29</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 194: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 195: Signal &lt;<arg fmt="%s" index="1">array_reg_2</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 196: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 197: Signal &lt;<arg fmt="%s" index="1">array_reg_2</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 198: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 199: Signal &lt;<arg fmt="%s" index="1">array_reg_3</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 200: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 201: Signal &lt;<arg fmt="%s" index="1">array_reg_3</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 202: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 203: Signal &lt;<arg fmt="%s" index="1">array_reg_4</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 204: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 205: Signal &lt;<arg fmt="%s" index="1">array_reg_4</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 206: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 207: Signal &lt;<arg fmt="%s" index="1">array_reg_29</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 208: Signal &lt;<arg fmt="%s" index="1">regfile_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 209: Signal &lt;<arg fmt="%s" index="1">array_reg_29</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="HDLCompiler" num="91" delta="old" >"D:\Xilinx\workshop\cpu_32_board\cpu_board_final.v" Line 215: Signal &lt;<arg fmt="%s" index="1">scan_switch</arg>&gt; missing in the sensitivity list is added for synthesis purposes. HDL and post-synthesis simulations may differ as a result.
</msg>

<msg type="warning" file="Xst" num="2972" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_part/regfiles/regfile.v</arg>&quot; line <arg fmt="%d" index="2">61</arg>. All outputs of instance &lt;<arg fmt="%s" index="3">fw_rf2</arg>&gt; of block &lt;<arg fmt="%s" index="4">file_write</arg>&gt; are unconnected in block &lt;<arg fmt="%s" index="5">regfile</arg>&gt;. Underlying logic will be removed.
</msg>

<msg type="warning" file="Xst" num="2972" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_part/regfiles/regfile.v</arg>&quot; line <arg fmt="%d" index="2">62</arg>. All outputs of instance &lt;<arg fmt="%s" index="3">fw_rf3</arg>&gt; of block &lt;<arg fmt="%s" index="4">file_write</arg>&gt; are unconnected in block &lt;<arg fmt="%s" index="5">regfile</arg>&gt;. Underlying logic will be removed.
</msg>

<msg type="warning" file="Xst" num="2972" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_part/regfiles/regfile.v</arg>&quot; line <arg fmt="%d" index="2">63</arg>. All outputs of instance &lt;<arg fmt="%s" index="3">fw_rf4</arg>&gt; of block &lt;<arg fmt="%s" index="4">file_write</arg>&gt; are unconnected in block &lt;<arg fmt="%s" index="5">regfile</arg>&gt;. Underlying logic will be removed.
</msg>

<msg type="warning" file="Xst" num="2972" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_part/regfiles/regfile.v</arg>&quot; line <arg fmt="%d" index="2">64</arg>. All outputs of instance &lt;<arg fmt="%s" index="3">fw_rf8</arg>&gt; of block &lt;<arg fmt="%s" index="4">file_write</arg>&gt; are unconnected in block &lt;<arg fmt="%s" index="5">regfile</arg>&gt;. Underlying logic will be removed.
</msg>

<msg type="warning" file="Xst" num="2972" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_part/regfiles/regfile.v</arg>&quot; line <arg fmt="%d" index="2">65</arg>. All outputs of instance &lt;<arg fmt="%s" index="3">fw_rf29</arg>&gt; of block &lt;<arg fmt="%s" index="4">file_write</arg>&gt; are unconnected in block &lt;<arg fmt="%s" index="5">regfile</arg>&gt;. Underlying logic will be removed.
</msg>

<msg type="warning" file="Xst" num="2972" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_part/regfiles/regfile.v</arg>&quot; line <arg fmt="%d" index="2">66</arg>. All outputs of instance &lt;<arg fmt="%s" index="3">fw_rf30</arg>&gt; of block &lt;<arg fmt="%s" index="4">file_write</arg>&gt; are unconnected in block &lt;<arg fmt="%s" index="5">regfile</arg>&gt;. Underlying logic will be removed.
</msg>

<msg type="warning" file="Xst" num="2972" delta="new" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_32_board/cpu_board_final.v</arg>&quot; line <arg fmt="%d" index="2">74</arg>. All outputs of instance &lt;<arg fmt="%s" index="3">key_anti_shake0</arg>&gt; of block &lt;<arg fmt="%s" index="4">key_anti_shake_2</arg>&gt; are unconnected in block &lt;<arg fmt="%s" index="5">cpu_board_final</arg>&gt;. Underlying logic will be removed.
</msg>

<msg type="info" file="Xst" num="3210" delta="new" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_32_board/cpu_board_final.v</arg>&quot; line <arg fmt="%s" index="2">74</arg>: Output port &lt;<arg fmt="%s" index="3">key_out</arg>&gt; of the instance &lt;<arg fmt="%s" index="4">key_anti_shake0</arg>&gt; is unconnected or connected to loadless signal.
</msg>

<msg type="warning" file="Xst" num="653" delta="old" >Signal &lt;<arg fmt="%s" index="1">wrsig</arg>&gt; is used but never assigned. This sourceless signal will be automatically connected to value <arg fmt="%s" index="2">GND</arg>.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">scan_switch&lt;3&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">scan_switch&lt;2&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">scan_switch&lt;1&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">scan_switch&lt;0&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="2404" delta="old" > FFs/Latches &lt;<arg fmt="%s" index="1">wrsigrise</arg>&lt;<arg fmt="%d" index="2">0</arg>:<arg fmt="%d" index="3">0</arg>&gt;&gt; (without init value) have a constant value of <arg fmt="%c" index="4">0</arg> in block &lt;<arg fmt="%s" index="5">uart</arg>&gt;.
</msg>

<msg type="info" file="Xst" num="3210" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_32_board/cpu_mem_final.v</arg>&quot; line <arg fmt="%s" index="2">37</arg>: Output port &lt;<arg fmt="%s" index="3">IM_R</arg>&gt; of the instance &lt;<arg fmt="%s" index="4">cpu_0</arg>&gt; is unconnected or connected to loadless signal.
</msg>

<msg type="info" file="Xst" num="3210" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_32_board/cpu.v</arg>&quot; line <arg fmt="%s" index="2">97</arg>: Output port &lt;<arg fmt="%s" index="3">carry</arg>&gt; of the instance &lt;<arg fmt="%s" index="4">cpu_alu</arg>&gt; is unconnected or connected to loadless signal.
</msg>

<msg type="info" file="Xst" num="3210" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_32_board/cpu.v</arg>&quot; line <arg fmt="%s" index="2">97</arg>: Output port &lt;<arg fmt="%s" index="3">negative</arg>&gt; of the instance &lt;<arg fmt="%s" index="4">cpu_alu</arg>&gt; is unconnected or connected to loadless signal.
</msg>

<msg type="info" file="Xst" num="3210" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/cpu_32_board/cpu.v</arg>&quot; line <arg fmt="%s" index="2">97</arg>: Output port &lt;<arg fmt="%s" index="3">overflow</arg>&gt; of the instance &lt;<arg fmt="%s" index="4">cpu_alu</arg>&gt; is unconnected or connected to loadless signal.
</msg>

<msg type="warning" file="Xst" num="647" delta="old" >Input &lt;<arg fmt="%s" index="1">order&lt;10:6&gt;</arg>&gt; is never used. This port will be preserved and left unconnected if it belongs to a top-level block or it belongs to a sub-block and the hierarchy of this sub-block is preserved.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">negative</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">carry</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;31&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;30&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;29&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;28&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;27&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;26&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;25&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;24&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;23&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;22&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;21&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;20&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;19&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;18&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;17&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;16&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;15&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;14&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;13&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;12&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;11&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;10&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;9&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;8&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;7&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;6&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;5&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;4&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;3&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;2&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;1&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">c&lt;0&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">carry</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="info" file="Xst" num="3210" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/example_5/sum_origin/cla_32_final.v</arg>&quot; line <arg fmt="%s" index="2">30</arg>: Output port &lt;<arg fmt="%s" index="3">g_out</arg>&gt; of the instance &lt;<arg fmt="%s" index="4">cla_320</arg>&gt; is unconnected or connected to loadless signal.
</msg>

<msg type="info" file="Xst" num="3210" delta="old" >&quot;<arg fmt="%s" index="1">d:/xilinx/workshop/example_5/sum_origin/cla_32_final.v</arg>&quot; line <arg fmt="%s" index="2">30</arg>: Output port &lt;<arg fmt="%s" index="3">p_out</arg>&gt; of the instance &lt;<arg fmt="%s" index="4">cla_320</arg>&gt; is unconnected or connected to loadless signal.
</msg>

<msg type="warning" file="Xst" num="647" delta="old" >Input &lt;<arg fmt="%s" index="1">addr&lt;31:13&gt;</arg>&gt; is never used. This port will be preserved and left unconnected if it belongs to a top-level block or it belongs to a sub-block and the hierarchy of this sub-block is preserved.
</msg>

<msg type="warning" file="Xst" num="647" delta="old" >Input &lt;<arg fmt="%s" index="1">addr&lt;1:0&gt;</arg>&gt; is never used. This port will be preserved and left unconnected if it belongs to a top-level block or it belongs to a sub-block and the hierarchy of this sub-block is preserved.
</msg>

<msg type="warning" file="Xst" num="647" delta="old" >Input &lt;<arg fmt="%s" index="1">DM_R</arg>&gt; is never used. This port will be preserved and left unconnected if it belongs to a top-level block or it belongs to a sub-block and the hierarchy of this sub-block is preserved.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">send</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">uart1</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="info" file="Xst" num="3218" delta="old" >HDL ADVISOR - The RAM &lt;<arg fmt="%s" index="1">Mram_array_reg</arg>&gt; will be implemented on LUTs either because you have described an asynchronous read or because of currently unsupported block RAM features. If you have described an asynchronous read, making it synchronous would allow you to take advantage of available block RAM resources, for optimized device usage and improved timings. Please refer to your documentation for coding guidelines.
</msg>

<msg type="info" file="Xst" num="3218" delta="old" >HDL ADVISOR - The RAM &lt;<arg fmt="%s" index="1">Mram_DIG_r</arg>&gt; will be implemented on LUTs either because you have described an asynchronous read or because of currently unsupported block RAM features. If you have described an asynchronous read, making it synchronous would allow you to take advantage of available block RAM resources, for optimized device usage and improved timings. Please refer to your documentation for coding guidelines.
</msg>

<msg type="info" file="Xst" num="3218" delta="old" >HDL ADVISOR - The RAM &lt;<arg fmt="%s" index="1">Mram_Y_r</arg>&gt; will be implemented on LUTs either because you have described an asynchronous read or because of currently unsupported block RAM features. If you have described an asynchronous read, making it synchronous would allow you to take advantage of available block RAM resources, for optimized device usage and improved timings. Please refer to your documentation for coding guidelines.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">send</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">uart</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">scan_switch_3</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">cpu_board_final</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">scan_switch_2</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">cpu_board_final</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">scan_switch_1</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">cpu_board_final</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">scan_switch_0</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">cpu_board_final</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">carry</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_15</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_16</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_14</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_17</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_13</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_18</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_12</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_19</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_11</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_20</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_10</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_21</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_9</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_22</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_8</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_23</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_7</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_24</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_6</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_25</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_5</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_26</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_4</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_27</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_3</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_28</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_2</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_29</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_1</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_0</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_30</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1294" delta="old" >Latch &lt;<arg fmt="%s" index="1">c_31</arg>&gt; is equivalent to a wire in block &lt;<arg fmt="%s" index="2">barrelshifter</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">cpu_final/cpu_0/cpu_alu/negative</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">cpu_board_final</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">cpu_final/cpu_0/cpu_alu/carry</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">cpu_board_final</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/cnt1_7</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/cnt1_6</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/cnt1_5</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/cnt1_4</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/cnt1_3</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/cnt1_2</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/cnt1_1</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/cnt1_0</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">uart1/tx</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">1</arg> in block &lt;<arg fmt="%s" index="3">cpu_board_final</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="info" file="Xst" num="2169" delta="old" >HDL ADVISOR - Some clock signals were not automatically buffered by XST with BUFG/BUFR resources. Please use the buffer_type constraint in order to insert these buffers to the clock signals to help prevent skew problems.
</msg>

</messages>

